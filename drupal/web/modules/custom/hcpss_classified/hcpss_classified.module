<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;
use Drupal\Core\Render\Markup;
use Drupal\Core\Render\Element;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Url;

/**
 * Implements hook_toolbar().
 */
function hcpss_classified_toolbar() {
  $items['dashboard'] = [
    '#type' => 'toolbar_item',
    '#weight' => -19,
    '#attached' => [
      'library' => ['dashboards/core'],
    ],
    'tab' => [
      '#type' => 'link',
      '#title' => t('Dashboard'),
      '#url' => Url::fromRoute('entity.dashboard.canonical', [
        'dashboard' => 'dashboard',
      ]),
      '#attributes' => [
        'class' => [
          'toolbar-icon',
          'toolbar-menu-administration-dashboard',
        ],
      ],
    ],
  ];

  return $items;
}

/**
 * Implements hook_toolbar_alter().
 */
function hcpss_classified_toolbar_alter(&$items) {
  if (!empty($items['dashboards'])) {
    unset($items['dashboards']);
  }
}

/**
 * Implements hook_entity_insert().
 */
function hcpss_classified_webform_submission_insert(EntityInterface $entity) {
  \Drupal::requestStack()->getCurrentRequest()->getSession()->set('cart', []);
}

/**
 * Implements hook_form_alter().
 */
function hcpss_classified_form_webform_submission_checkout_add_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $cart = \Drupal::requestStack()
    ->getCurrentRequest()
    ->getSession()
    ->get('cart');

  if (!empty($cart)) {
    $form['elements']['items']['#default_value'] = [];
    foreach ($cart as $nid => $quantity) {
      $form['elements']['items']['#default_value'][] = [
        'item' => $nid,
        'quantity' => $quantity,
      ];
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function hcpss_classified_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form['#id'] == 'views-exposed-form-listing-page-1') {
    /** @var \Drupal\taxonomy\TermStorage $storage */
    $storage = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term');

    $categories = $storage->loadTree('category');

    $options_formatter = function (array $terms) {
      return array_reduce($terms, function ($carry, $item) {
        $label = $item->parents[0] ? "- {$item->name}" : $item->name;
        $carry[$item->name] = $label;
        return $carry;
      }, ['' => '- Any -']);
    };

    $form['categories_name'] = [
      '#type' => 'select',
      '#title' => t('Category'),
      '#options' => $options_formatter($categories),
    ];
  }
}

/**
 * Implements hook_mail().
 */
function hcpss_classified_mail($key, &$message, $params) {
  switch ($key) {
    case 'hcpss_classified_checkout':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = 'An inventory request has been made';
      $message['headers']['Content-Type'] = 'text/html';

      $template_path = \Drupal::service('extension.list.module')
          ->getPath('hcpss_classified') . '/templates/email/checkout.html.twig';

      $template = \Drupal::service('twig')->loadTemplate($template_path);

      $node = Node::load($params['nid']);
      $message['body'][] = Markup::create($template->render([
        'node' => $node,
        'line_items' => $node->field_line_items->referencedEntities(),
      ]));
      break;
  }
}

/**
 * Implements hook_theme().
 */
function hcpss_classified_theme() {
  return [
    'line_item_composite' => [
      'render element' => 'element',
    ],
  ];
}

/**
 * Prepares variables for line_item_composite templates.
 *
 * Default template: line-item-composite.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: An associative array containing the properties of the element.
 */
function template_preprocess_line_item_composite(array &$variables) {
  // Here you can get the composite element and alter it.
  $element = $variables['element'];

  // Copy all accessible element children to content.
  foreach (Element::children($element) as $key) {
    if (!isset($element[$key]['#access']) || $element[$key]['#access']) {
      $variables['content'][$key] = $element[$key];
    }
  }

  // Set flexbox variable used for multi column element layout.
  $variables['flexbox'] = $element['#flexbox'] ?? FALSE;
}
